<% 
/*
=========================================================================
    
    EntitySpaces 2010 
    Persistence Layer and Business Objects for Microsoft .NET 
    Copyright 2005 - 2010 EntitySpaces, LLC 
    EntitySpaces(TM) is a legal trademark of EntitySpaces, LLC 
    http://www.entityspaces.net 

    This template is bound by the EntitySpaces License Agreement which 
    is located here:

    http://www.entityspaces.net/portal/License/tabid/97/Default.aspx
    
=========================================================================
*/
%><%@ TemplateInfo 
    UniqueID="8080A093-6450-4606-A15E-A84D072317D3" 
	UserInterfaceID="BFC7BDC4-25CD-490c-A1D1-CE09DB0D28B0"
    Title="RIA DynamicQuery Classes" 
    Description="RIA DynamicQuery Classes" 
    Namespace="EntitySpaces.2019.C#.RIA Services"
    Author="EntitySpaces, LLC" 
    Version="2019.0.0.0" 
    RequiresUI="True" %><%
//-------------------------------------------------------
// Extract the UI choices that we need
//-------------------------------------------------------
// System.Diagnostics.Debugger.Break();

ArrayList entities = esMeta.Input["Entities"] as ArrayList;
string entityType = (string)esMeta.Input["EntityType"];
string databaseName = (string)esMeta.Input["Database"];
string Namespace = (string)esMeta.Input["Namespace"];


//===============================================================
// Execute our SubTemplates ....
//===============================================================

ITable table = null;
IView  view = null;
IColumns cols = null;
string attributes = null;

IDatabase database = esMeta.Databases[databaseName];

foreach(string tableOrView in entities)
{
	string text = "";
	
	if(entityType == dbEntityType.Tables.ToString())
	{
		table = database.Tables[tableOrView];
		view = null;
		cols = table.Columns;
	}
	else 
	{
		view = database.Views[tableOrView];
		
		table = null;
		cols = view.Columns;
	}
	
	esPluginSource source = new esPluginSource(esMeta, table, view);
	esMeta.Input["Source"] = source;

%>/*===============================================================================
                    EntitySpaces Studio by EntitySpaces, LLC
             Persistence Layer and Business Objects for Microsoft .NET
             EntitySpaces(TM) is a legal trademark of EntitySpaces, LLC
                          http://www.entityspaces.net
===============================================================================
EntitySpaces Version : <%=esMeta.esPlugIn.esVersion%>
EntitySpaces Driver  : <%=esMeta.esPlugIn.esDriver%><%if(!esMeta.esPlugIn.TurnOffDateTimeInClassHeaders){%>
Date Generated       : <%=DateTime.Now.ToString()%><%}%>
===============================================================================
*/

using System;
using System.Runtime.Serialization;

using EntitySpaces.DynamicQuery;

namespace <%=Namespace%>
{
	[DataContract(Name = "<%=source.Query%>", Namespace = "http://www.entityspaces.net")]
	public partial class <%=source.ProxyStubQuery%> : esDynamicQuerySerializable
	{
		public <%=source.ProxyStubQuery%>() { }
		
		public <%=source.ProxyStubQuery%>(string joinAlias)
		{
			this.es.JoinAlias = joinAlias;
		}

        protected override string GetQueryName()
        {
            return "<%=source.Query%>";
        }	
		
        #region Implicit Casts

        public static implicit operator string(<%=source.ProxyStubQuery%> query)
        {
            return esDynamicQuerySerializable.SerializeHelper.ToXml(query);
        }

        #endregion			
<%		foreach(IColumn col in cols) {%>
		public esQueryItem <%=col.PropertyName%>
		{
			get { return new esQueryItem(this, "<%=col.Name%>", <%=col.esSystemType%>); }
		} 
		<%}%>
	}
}<% 
// Write out the Service Interface
string filepath = source.Entity + ".cs";
this.SaveToFile(filepath, output.ToString(), false);
this.ClearOutput();
%><%}%> 
<script runat="template">
private string SaveToFile(string fileName, string text, bool generateSingleFile)
{
	if(!generateSingleFile)
	{
	    string path = (string)esMeta.Input["OutputPath"];
	    
		string fname = path;
		if (!fname.EndsWith("\\")) 
			fname += "\\";
			
		Directory.CreateDirectory(path);		
		
		fname += fileName;
		
		using (StreamWriter sw = System.IO.File.CreateText(fname)) 
		{
			sw.Write(text);
		} 	
		
		return "";
	}
	else
	{
		return text;			
	}
}
</script>